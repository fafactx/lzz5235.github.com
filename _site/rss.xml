<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>place_your_blog_title_here</title>
    <link>place_your_blog_url_here</link>
    <atom:link href="place_your_blog_url_here/rss.xml" rel="self" type="application/rss+xml" />
    <description>place_your_blog_description_here</description>
    <language>place_your_blog_language_here</language>
    <pubDate>Mon, 19 May 2014 09:43:00 +0800</pubDate>
    <lastBuildDate>Mon, 19 May 2014 09:43:00 +0800</lastBuildDate>

    
    <item>
      <title>Proxy模式C++实现</title>
      <link>place_your_blog_url_here/2014/05/19/proxyc.html</link>
      <pubDate>19 May 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/2014/05/19/proxyc</guid>
      <description>&lt;h1&gt;代理模式 C++实现&lt;/h1&gt;

&lt;p&gt;代理模式是一种常用的设计模式，他可以使得真实的角色就是实现业务的逻辑，不用关心非其本职责的实务，而是依靠后期代理实现。
这种方式可以实现解耦，让我们类的职责更加明确。
代理模式有很多种，有普通代理，强制代理，还有动态代理。&lt;/p&gt;

&lt;h6&gt;普通代理模式与强制代理模式的区别在于真正实现业务的逻辑由谁创建？强制代理模式表示必须由业务者创建，普通代理则认为可以由代理者创建！&lt;/h6&gt;

&lt;h6&gt;这种普通代理模式主要应用在smart_ptr中。&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/55800.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;
 
class IGamePlayer
{
public:
    virtual void login(string user,string password) =0;
    virtual void killBoss()=0;
    virtual void update()=0;
};
 
class GamePlayer:public IGamePlayer
{
private :
    string name;
public:
    GamePlayer(IGamePlayer *_gameplayer,string _name)
    {
        name = _name;
        if(_gameplayer==NULL)
            cout &lt;&lt; &quot;_gameplayer failture&quot; &lt;&lt; endl;
    }
    void killBoss(){ cout &lt;&lt; &quot;killBoss&quot; &lt;&lt;endl;}
    void login(string user,string password){ cout &lt;&lt; user &lt;&lt; &quot;  &quot;&lt;&lt;password &lt;&lt;endl;}
    void update(){ cout &lt;&lt; &quot;update!&quot; &lt;&lt;endl; }
};
 
class GamePlayerProxy:public IGamePlayer
{
private:
    IGamePlayer *gameplayer;
public:
    GamePlayerProxy(string name)
    {
        gameplayer = new GamePlayer(this,name);
        if(gameplayer ==NULL)
            cout &lt;&lt; &quot;Create failture!&quot; &lt;&lt; endl;
    }
    void killBoss() {gameplayer-&gt;killBoss();}
    void login(string user,string password){gameplayer-&gt;login(user,password);}
    void update(){gameplayer-&gt;update();}
};
 
int main()
{
    IGamePlayer *proxy = new GamePlayerProxy(&quot;user1&quot;);
    proxy-&gt;login(&quot;lzz&quot;,&quot;lzz&quot;);
    proxy-&gt;killBoss();
    proxy-&gt;update();
    delete proxy;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;强制代理与普通代理的不同在于业务函数必须由业务类制剂创建！并由业务类返回代理者！&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;
 
 
class IGamePlayer
{
public:
    virtual void login(string user,string password) =0;
    virtual void killBoss()=0;
    virtual void update()=0;
    virtual IGamePlayer* getProxy()=0;
};
 
class GamePlayerProxy:public IGamePlayer
{
private:
    IGamePlayer *gameplayer;
public:
    GamePlayerProxy(IGamePlayer *_gameplayer)
    {
        this-&gt;gameplayer = _gameplayer;
    }
    void killBoss() {this-&gt;gameplayer-&gt;killBoss();}
    void login(string user,string password){this-&gt;gameplayer-&gt;login(user,password);}
    void update(){this-&gt;gameplayer-&gt;update();}
    IGamePlayer* getProxy(){ return this;}
};
 
class GamePlayer:public IGamePlayer
{
private :
    string name;
    IGamePlayer *Proxy;
    bool isProxy()
    {
        if(Proxy==NULL)
            return false;
        else
            return true;
    }
public:
    GamePlayer(string _name)
    {
        name = _name;
    }
    IGamePlayer* getProxy()
    {
        this-&gt;Proxy = new GamePlayerProxy(this);
        return Proxy;
    }
    void killBoss(){ if(isProxy())cout &lt;&lt; &quot;killBoss&quot; &lt;&lt;endl;}
    void login(string user,string password){ if(isProxy()) cout &lt;&lt; user &lt;&lt; &quot;  &quot;&lt;&lt;password &lt;&lt;endl;}
    void update(){ if(isProxy())cout &lt;&lt; &quot;update!&quot; &lt;&lt;endl; }
 
};
 
int main()
{
    IGamePlayer *player = new GamePlayer(&quot;user1&quot;);
    IGamePlayer *proxy = player-&gt;getProxy();
    proxy-&gt;login(&quot;lzz&quot;,&quot;lzz&quot;);
    proxy-&gt;killBoss();
    proxy-&gt;update();
    delete proxy;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;还有一种动态代理的模式，主要用在Java中，动态代理在实现阶段不在乎代理谁，而主要在运行阶段才真正的代理。&lt;/p&gt;

&lt;p&gt;handler只需要继承InvocationHandler即可，然后再invoke（）中返回要调用的方法或者函数。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Protype_IteratorC++实现</title>
      <link>place_your_blog_url_here/2014/05/19/protype_iteratorc.html</link>
      <pubDate>19 May 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/2014/05/19/protype_iteratorc</guid>
      <description>&lt;h1&gt;原型模式 迭代器模式 C++实现&lt;/h1&gt;

&lt;p&gt;原型模式其实非常简单，难易程度其实就是单例模式与迭代器模式差不多。
在Java中我们可以有很多的接口使用，在这里，我们也许会用到Cloneable接口，然后在复制的类里面实现clone方法。&lt;/p&gt;

&lt;h5&gt;调用这个clone（）就等于完成了类的复制，而不是通过new来创建。Clone（）方法是在内存中进行拷贝，所以不会调用构造函数！&lt;/h5&gt;

&lt;p&gt;final与clone不共融，final使用后，就意味着无法进行重写，而调用clone（）必须重写！&lt;/p&gt;

&lt;p&gt;我们知道在OO语言中，有深拷贝与浅拷贝之分。浅拷贝只拷贝类对象，类里面的数组都共享一份，这期中就有潜在的风险。而深拷贝则是完全将对象拷贝两份，也就是说内存中含有两份一模一样的对象！&lt;/p&gt;

&lt;h5&gt;扯完Java，我来用C++实现原型模式，C++中没有什么clone接口，所以我们完全要手动来做。&lt;/h5&gt;

&lt;blockquote&gt;&lt;p&gt;这里有个小插曲：
因为我是在vs2012中编译的。目前vs2012已经把strcpy函数禁用掉，因为存在不安全性。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/70658.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;正如之前爆出的heartbleed漏洞，也是未对字符串赋值进行检查导致，所以我们这里使用strcpy_s()不过这样确实丧失了移植性。需要注意一下。
如果我们不需要这种提醒，可以在设置中把预编译检查关闭！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/71649.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;
 
 
class Mail
{
public:
    Mail(){};
    virtual Mail* Clone(){return NULL;}
    virtual void show() =0;
    char *getstr(){return name;}
protected:
    char* name;
};
 
class MailA :public Mail
{
public:
    MailA(char *str)
    {
        if(str==NULL){      name = new char[10];    name[9]='\0';}
        else{name = new char[strlen(str)+1]; strcpy_s(name,10,str);}
    }
    ~MailA(){delete name;}
    MailA(Mail &amp;r){     name = new char[strlen(r.getstr())+1]; strcpy_s(name,strlen(r.getstr())+1,r.getstr());  }
    Mail* Clone(){return (Mail *)new MailA(*this);}
    void show(){cout &lt;&lt; name &lt;&lt; endl;}
};
 
class MailB :public Mail
{
public:
    MailB(char *str)
    {
        if(str==NULL){      name = new char[10];    name[9]='\0';}
        else{name = new char[strlen(str)+1]; strcpy_s(name,10,str);}
    }
    ~MailB(){delete name;}
    MailB(Mail &amp;r){     name = new char[strlen(r.getstr())+1]; strcpy_s(name,strlen(r.getstr())+1,r.getstr());  }
    Mail* Clone(){return (Mail *)new MailB(*this);}
    void show(){cout &lt;&lt; name &lt;&lt; endl;}
};
 
int main()
{
    Mail *m1 = new MailA(&quot;A&quot;);
    Mail *m2 = new MailB(&quot;B&quot;);
    Mail *m3 = m1-&gt;Clone();
    Mail *m4 = m2-&gt;Clone();
    m1-&gt;show(); m2-&gt;show(); //删除m1,m2  
    delete m1; delete m2;     
    m1 = m2 = NULL;  
 
    //深拷贝所以对m3,m4无影响  
    m3-&gt;show(); m4-&gt;show();  
    delete m3; delete m4;  
    m3 = m4 = NULL;  
}
&lt;/code&gt;&lt;/pre&gt;


&lt;h5&gt;迭代器模式如STL，通过容器来管理复杂的数据结构，类等。然后通过iteration来迭代，俗称迭代器模式。&lt;/h5&gt;

&lt;p&gt;在Java中有现成的迭代器来使用，在C++中，我们需要自己实现这种接口iterator。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/3617.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#include&lt;iostream&gt;
#include&lt;string&gt;
#include &lt;vector&gt;
using namespace std;
 
template &lt;class T&gt;
class Iterator
{
public:
    virtual void first()=0;
    virtual void next()=0;
    virtual T* currentItem()=0;
    virtual bool isEnd()=0;
    virtual ~Iterator(){}
};
 
template &lt;class T&gt;
class RealSet;
 
template &lt;class T&gt;
class RealIterator:public Iterator &lt;T&gt;
{
private:
    RealSet&lt;T&gt; *rset;
    int cur_ptr;
public:
    RealIterator(RealSet&lt;T&gt; *a):rset(a),cur_ptr(0){}
    void first(){cur_ptr=0;}
    void next(){if(cur_ptr &lt; rset-&gt;getlen() ) cur_ptr++;}
    T* currentItem()
    {
        if(cur_ptr &lt;rset-&gt;getlen())   return &amp;(*rset)[cur_ptr];
        else return NULL;
    }
    bool isEnd()
    {
        if(cur_ptr &gt;=rset-&gt;getlen())return false;
        return true;
    }
};
 
template &lt;class T&gt;
class Set
{
public:
    virtual Iterator&lt;T&gt;* createIterator()=0;
    virtual void push(T a)=0;
    virtual ~Set(){}
};
 
template &lt;class T&gt;
class RealSet:public Set&lt;T&gt;
{
private:
    vector&lt;T&gt; data;
public:
    RealSet(){}
    ~RealSet(){}
    virtual Iterator&lt;T&gt;* createIterator(){ return new RealIterator&lt;T&gt;(this);}
    virtual T&amp; operator[](int index){return data[index];}
    int getlen(){return data.size();}
    void push(T a)
    {
        data.push_back(a);
    }
};
 
int main()
{
    Set&lt;double&gt; *set = new RealSet&lt;double&gt;();
    Iterator&lt;double&gt; *iter = set-&gt;createIterator();
    set-&gt;push(3.22);
    set-&gt;push(1.86);
    set-&gt;push(0.88);
 
    for(iter-&gt;first();iter-&gt;isEnd();iter-&gt;next())
    {
        cout &lt;&lt; *iter-&gt;currentItem() &lt;&lt; endl;
    }
    delete iter;
    delete set;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;


&lt;h6&gt;确实这种template编程很难，我调试了一下好久才找到问题所在。。。。。。&lt;/h6&gt;
</description>
    </item>
    
    <item>
      <title>Template_Builder_DesignPattern</title>
      <link>place_your_blog_url_here/2014/05/13/template_builder_designpattern.html</link>
      <pubDate>13 May 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/2014/05/13/template_builder_designpattern</guid>
      <description>&lt;h1&gt;模板方法模式 建造者模式 C++实现&lt;/h1&gt;

&lt;p&gt;今天我继续来填坑，模板方法模式就是在模板方法中按照一定的规则顺序调用基本方法。这个比较简单。&lt;/p&gt;

&lt;p&gt;比如我在父类run（）中调用类中一系列的方法。钩子是一种方法，它在抽象类中不做事，或者只做默认的事情，子类可以选择要不要去覆盖它。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Java中，如果父类里面有些方法不允许覆写，那么为了防止子类改变模板方法中的算法，可以将模板方法声明为final。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/IMG_0432.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#include &lt;iostream&gt;
using namespace std;
 
class CarTemplate
{
public:
    CarTemplate(void){};
    virtual ~CarTemplate(void){};
 
protected:
    virtual void Start() = 0;
    virtual void Stop() = 0;
    virtual void Alarm() = 0;
    virtual void EngineBoom() = 0;
    virtual bool IsAlarm() =0;
 
public:
        void Run()
        {
        Start();
 
        EngineBoom();
 
        if(IsAlarm())
            Alarm();
 
        Stop();
        };
};
 
class Hummer: public CarTemplate
{
public:
    Hummer(){m_isAlarm = true;}
    virtual ~Hummer(){};
 
protected:
    void Start(){   cout&lt;&lt; &quot;Hummer Start&quot; &lt;&lt; endl;   }
    void Stop(){    cout&lt;&lt; &quot;Hummer Stop&quot; &lt;&lt; endl;    }
    void Alarm(){   cout&lt;&lt; &quot;Hummer Alarm&quot; &lt;&lt; endl;}
    bool IsAlarm(){ return m_isAlarm;       }
    void EngineBoom(){  cout&lt;&lt; &quot;Hummer EngineBoom&quot; &lt;&lt; endl;  }
private:
    bool m_isAlarm;
};
 
class Benz: public CarTemplate
{
public:
    Benz(){m_isAlarm = false;}
    virtual ~Benz(){};
 
protected:
    void Start(){   cout&lt;&lt; &quot;Benz Start&quot; &lt;&lt; endl; }
    void Stop(){    cout&lt;&lt; &quot;Benz Stop&quot; &lt;&lt; endl;  }
    void Alarm(){   cout&lt;&lt; &quot;Benz Alarm&quot; &lt;&lt; endl;}
    bool IsAlarm(){ return m_isAlarm;       }
    void EngineBoom(){  cout&lt;&lt; &quot;Benz EngineBoom&quot; &lt;&lt; endl;    } 
private:     
        bool m_isAlarm; 
}; 

int main() 
{   
        CarTemplate *hummer = new Hummer();     
        hummer-&gt;Run();
    delete  hummer;
 
    CarTemplate *benz = new Benz();
    benz-&gt;Run();
    delete benz;
}
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;优点就在于可以封装不变的部分，拓展可变的部分，也就是把共性的东西抽取出来，这样可以便于维护。&lt;/p&gt;

&lt;p&gt;但是缺点在于子类的执行，影响到父类的结果。有时候会有一些晦涩难懂。
———————————————————————————————-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;在模板方法中，我们把相同的都封装在父类中，不同都定义在子类中。但是需求的变化是无穷无尽的。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;比如建造的顺序可能是变化的，所以将他放到builder类中，通过builder类获取真正的product！&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/6446jgG.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
class Builder
{
public:
    virtual void BuildHead() {}
    virtual void BuildBody() {}
    virtual void BuildLeftArm(){}
    virtual void BuildRightArm() {}
    virtual void BuildLeftLeg() {}
    virtual void BuildRightLeg() {}
};
//构造瘦人
class ThinBuilder:public Builder
{
public:
    void BuildHead() { cout&lt;&lt; &quot;build thin body&quot; &lt;&lt; endl; }
    void BuildBody() { cout&lt;&lt; &quot;build thin head&quot; &lt;&lt; endl; }
    void BuildLeftArm() { cout&lt;&lt; &quot;build thin leftarm&quot; &lt;&lt; endl; }
    void BuildRightArm() { cout&lt;&lt; &quot;build thin rightarm&quot; &lt;&lt; endl; }
    void BuildLeftLeg() { cout&lt;&lt; &quot;build thin leftleg&quot; &lt;&lt; endl; }
    void BuildRightLeg() { cout&lt;&lt; &quot;build thin rightleg&quot; &lt;&lt; endl; }
};
//构造胖人
class FatBuilder : public Builder
{
public:
    void BuildHead() { cout&lt;&lt;&quot;build fat body&quot;&lt;&lt; endl; }
    void BuildBody() { cout&lt;&lt;&quot;build fat head&quot;&lt;&lt; endl; }
    void BuildLeftArm() { cout&lt;&lt;&quot;build fat leftarm&quot;&lt;&lt; endl; }
    void BuildRightArm() { cout&lt;&lt;&quot;build fat rightarm&quot;&lt;&lt; endl; }
    void BuildLeftLeg() { cout&lt;&lt;&quot;build fat leftleg&quot;&lt;&lt; endl; }
    void BuildRightLeg() { cout&lt;&lt;&quot;build fat rightleg&quot;&lt;&lt; endl; }   
};   //构造的指挥官   

class Director     {   
private:       
    Builder *m_pBuilder;   
public:       
    Director(Builder *builder) { m_pBuilder = builder; }       
    void Create()
    {           
        m_pBuilder-&gt;BuildHead();
        m_pBuilder-&gt;BuildBody();
        m_pBuilder-&gt;BuildLeftArm();
        m_pBuilder-&gt;BuildRightArm();
        m_pBuilder-&gt;BuildLeftLeg();
        m_pBuilder-&gt;BuildRightLeg();
    }
};
 
int main()
{
    FatBuilder fat;
    Director director(&amp;fat);
    director.Create();
---------------------------------------------------------------------------
    Builder *thin = new ThinBuilder();
    Director *dir = new Director(thin);
    dir-&gt;Create();
 
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;建造者模式的优点：在于我们不用关心每个产品内部的组成细节，比如FatBuildier ThinBuilider，然后我们交给Director来构造就好了。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;建造者是独立的，我们可以拓展更多的builder完成不同的功能。并不对系统有任何影响。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;_特别适合产品类特别复杂，顺序不同，效能不同。顺序是区别模板模式与建造者模式最大的不同点！&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;另外同工厂模式进行比较，工厂模式适合生产零件。不能再细分了。否则就不适合工厂模式。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5&gt;把模板方式和建造者模式组合起来可以产生很好的效果，可以按照model通过builder批量生产某种特定型号的产品。&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/IMG_0433.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;string&gt;
using namespace std;

class CCarModel
{
public:
    CCarModel(void) {}
    virtual ~CCarModel(void){}
    void Run()
    {
            vector::const_iterator it = m_pSequence-&gt;begin();
        for (; it &lt; m_pSequence-&gt;end(); ++it)
        {
            string actionName = *it;
            if(actionName.compare(&quot;start&quot;) == 0)
            {
                Start();
            }
            else if(actionName.compare(&quot;stop&quot;) == 0)
            {
                Stop();
            }
            else if(actionName.compare(&quot;alarm&quot;) == 0)
            {
                Alarm();
            }
            else if(actionName.compare(&quot;engine boom&quot;) == 0)
            {
                EngineBoom();
            }
        }
    }
    void SetSequence(vector *pSeq)
    {
            m_pSequence = pSeq;
    }
protected:
    virtual void Start() = 0;
    virtual void Stop() = 0;
    virtual void Alarm() = 0;
    virtual void EngineBoom() = 0;
private:
    vector * m_pSequence;
};

class CBenzModel : public CCarModel
{
public:
    CBenzModel(void){}
    ~CBenzModel(void){}
protected:
    void Start(){cout &lt;&lt; &quot;Benz Start...&quot; &lt;&lt; endl;}
    void Stop(){cout &lt;&lt; &quot;Benz Stop...&quot; &lt;&lt; endl;}
    void Alarm(){cout &lt;&lt; &quot;Benz Alarm&quot; &lt;&lt; endl;}
    void EngineBoom(){cout &lt;&lt; &quot;Benz EngineBoom....&quot; &lt;&lt; endl;}
};

class CBMWModel : public CCarModel
{
public:
    CBMWModel(void){}
    ~CBMWModel(void){}
protected:
    void Start(){cout &lt;&lt; &quot;BMW Start...&quot; &lt;&lt; endl;}
    void Stop(){cout &lt;&lt; &quot;BMW Stop...&quot; &lt;&lt; endl;}
    void Alarm(){cout &lt;&lt; &quot;BMW Alarm&quot; &lt;&lt; endl;}
    void EngineBoom(){cout &lt;&lt; &quot;BMW EngineBoom....&quot; &lt;&lt; endl;}
};

class ICarBuilder
{
public:
    ICarBuilder(void)   { }
    virtual ~ICarBuilder(void)  { }
    virtual void SetSequence(vector *pseq) = 0;
    virtual CCarModel * GetCarModel() = 0;
};

class CBenzBuilder : public ICarBuilder
{
public:
    CBenzBuilder(void);
    ~CBenzBuilder(void);
    void SetSequence(vector *pSeq);
    CCarModel * GetCarModel();
private:
    CCarModel *m_pBenz;
};
CBenzBuilder::CBenzBuilder(void)
{
    m_pBenz = new CBenzModel();
}
CBenzBuilder::~CBenzBuilder(void)
{
    delete m_pBenz;
}
void CBenzBuilder::SetSequence(vector *pSeq)
{
    m_pBenz-&gt;SetSequence(pSeq);
}
CCarModel * CBenzBuilder::GetCarModel()
{
    return m_pBenz;
}

class CBMWBuilder :public ICarBuilder
{
public:
    CBMWBuilder(void);
    ~CBMWBuilder(void);
    void SetSequence(vector *pSeq);
    CCarModel * GetCarModel();
private:
    CCarModel *m_pBMW;
};

CBMWBuilder::CBMWBuilder(void)
{
    m_pBMW = new CBMWModel();
}
CBMWBuilder::~CBMWBuilder(void)
{
    delete m_pBMW;
}
void CBMWBuilder::SetSequence( vector *pSeq )
{
    m_pBMW-&gt;SetSequence(pSeq);
}
CCarModel * CBMWBuilder::GetCarModel()
{
    return m_pBMW;
}

class CDirector
{
public:
    CDirector(void);
    ~CDirector(void);
    CBenzModel * GetABenzModel();
    CBenzModel * GetBBenzModel();
    CBMWModel * GetCBMWModel();
    CBMWModel * GetDBMWModel();
private:
    vector * m_pSeqence;
    CBenzBuilder * m_pBenzBuilder;
    CBMWBuilder * m_pBMWBuilder;
};

CDirector::CDirector(void)
{
    m_pBenzBuilder = new CBenzBuilder();
    m_pBMWBuilder = new CBMWBuilder();
    m_pSeqence = new vector();
}
CDirector::~CDirector(void)
{
    delete m_pBenzBuilder;
    delete m_pBMWBuilder;
    delete m_pSeqence;
}
CBenzModel * CDirector::GetABenzModel()
{
    m_pSeqence-&gt;clear();
    m_pSeqence-&gt;push_back(&quot;start&quot;);
    m_pSeqence-&gt;push_back(&quot;stop&quot;);
    m_pBenzBuilder-&gt;SetSequence(m_pSeqence);
    return dynamic_cast&lt;CBenzModel*&gt;(m_pBenzBuilder-&gt;GetCarModel());
}
CBenzModel * CDirector::GetBBenzModel()
{
    m_pSeqence-&gt;clear();
    m_pSeqence-&gt;push_back(&quot;engine boom&quot;);
    m_pSeqence-&gt;push_back(&quot;start&quot;);
    m_pSeqence-&gt;push_back(&quot;stop&quot;);
    m_pBenzBuilder-&gt;SetSequence(m_pSeqence);
    return dynamic_cast&lt;CBenzModel*&gt;(m_pBenzBuilder-&gt;GetCarModel());
}
CBMWModel * CDirector::GetCBMWModel()
{
    m_pSeqence-&gt;clear();
    m_pSeqence-&gt;push_back(&quot;alarm&quot;);
    m_pSeqence-&gt;push_back(&quot;start&quot;);
    m_pSeqence-&gt;push_back(&quot;stop&quot;);
    m_pBMWBuilder-&gt;SetSequence(m_pSeqence);
    return static_cast&lt;CBMWModel*&gt;(m_pBMWBuilder-&gt;GetCarModel());
}
CBMWModel * CDirector::GetDBMWModel()
{
    m_pSeqence-&gt;clear();
    m_pSeqence-&gt;push_back(&quot;start&quot;);
    m_pBenzBuilder-&gt;SetSequence(m_pSeqence);
    return dynamic_cast&lt;CBMWModel*&gt;(m_pBMWBuilder-&gt;GetCarModel());
}
int main(int argc, char const *argv[])
{
    CDirector *dir = new CDirector();

    dir-&gt;GetBBenzModel()-&gt;Run();
    return 0;
}


&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;通过上面可以看出两个模式的配合得到了很好的运用！&lt;/p&gt;

&lt;p&gt;引用 http://blog.csdn.net/wuzhekai1985/article/details/6667467&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unix_Thread_API备注</title>
      <link>place_your_blog_url_here/2014/05/07/unix_thread_api.html</link>
      <pubDate>07 May 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/2014/05/07/unix_thread_api</guid>
      <description>&lt;h1&gt;Unix Thread API备注&lt;/h1&gt;

&lt;p&gt;这是最近读unix pthread and process使用的注意事项。&lt;/p&gt;

&lt;p&gt;fork（）可以创建子进程，这个函数返回两次，通过返回值来判断是父进程还是子进程。fork时子进程获得父进程数据空间、堆和栈的复制，所以变量的地址（当然是虚拟地址）也是一样的。但是需要了解的是我们要分开虚拟地址和物理地址，两个进程虚拟地址可以相同，但是物理地址不同。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;出于效率考虑，linux中引入了“写时复制“（Copy on Write）技术，也就是只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;但是会把父子共享的页面标记为“只读”（类似mmap的private的方式），如果父子进程一直对这个页面是同一个页面，知道其中任何一个进程要对共享的页面“写操作”，这时内核会复制一个物理页面给这个进程使用，同时修改页表。而把原来的只读页面标记为“可写”，留给另外一个进程使用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;_同时注意stdin stdout是行缓冲，也就意味着子进程会复制父进程输入输出的内容。fork（）函数前的printf（）部分也会复制！&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
while (1) {
    connfd = Accept(listenfd, (SA *) &amp;clientaddr, &amp;clientlen);
    if (Fork() == 0) {
        Close(listenfd); /* Child closes its listening socket */
        echo(connfd);    /* Child services client */
        Close(connfd);   /* Child closes connection with client */
        exit(0);         /* Child exits */
    }
    Close(connfd); /* Parent closes connected socket (important!) */
    }
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;这个就是返回子进程要先关闭父进程的监听套接字，因为子进程复制了父进程的变量，套接字也是一个道理！&lt;/p&gt;

&lt;p&gt;pthread_t pthread_self(void); 函数作用：获得线程自身的ID。&lt;/p&gt;

&lt;p&gt;void pthread_exit(void *thread_return) 终止所有线程，父进程先等待子线程退出，然后父进程退出&lt;/p&gt;

&lt;p&gt;void pthread_cancel(tid)退出当前线程&lt;/p&gt;

&lt;p&gt;int pthread_join(tid,void **return)&lt;/p&gt;

&lt;p&gt;int pthread_detach(tid)
编程当中可以用pthread_self返回当前线程的tid。&lt;/p&gt;

&lt;p&gt;创建一个线程默认的状态是joinable, 如果一个线程结束运行但没有被join,则它的状态类似于进程中的Zombie Process,即还有一部分资源没有被回收（退出状态码），所以创建线程者应该调用pthread_join来等待线程运行结束，并可得到线程的退出代码，回收其资源（类似于wait,waitpid)
但是调用pthread_join(pthread_id)后，如果该线程没有运行结束，调用者会被阻塞，在有些情况下我们并不希望如此.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;比如在Web服务器中当主线程为每个新来的链接创建一个子线程进行处理的时候，主线程并不希望因为调用pthread_join而阻塞（因为还要继续处理之后到来的链接），这时可以在子线程中加入代码pthread_detach(pthread_self())&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;或者父线程调用&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pthread_detach(thread_id)（非阻塞，可立即返回）这将该子线程的状态设置为detached,则该线程运行结束后会自动释放所有资源。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在web服务器里面，线程有同步问题。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
void sbuf_insert(sbuf_t *sp, int item)
{
    P(&amp;sp-&gt;slots);                          /* Wait for available slot */
    P(&amp;sp-&gt;mutex);                          /* Lock the buffer */
    sp-&gt;buf[(++sp-&gt;rear)%(sp-&gt;n)] = item;   /* Insert the item */
    V(&amp;sp-&gt;mutex);                          /* Unlock the buffer */
    V(&amp;sp-&gt;items);                          /* Announce available item */
}
 
int sbuf_remove(sbuf_t *sp)
{
    int item;
    P(&amp;sp-&gt;items);                          /* Wait for available item */
    P(&amp;sp-&gt;mutex);                          /* Lock the buffer */
    item = sp-&gt;buf[(++sp-&gt;front)%(sp-&gt;n)];  /* Remove the item */
    V(&amp;sp-&gt;mutex);                          /* Unlock the buffer */
    V(&amp;sp-&gt;slots);                          /* Announce available slot */
    return item;
}
....................
for (i = 0; i &lt; NTHREADS; i++)  
    Pthread_create(&amp;tid, NULL, thread, NULL);//创建了大量的thread线程，但是sbuf_remove(&amp;sbuf)相当于V（）操作，如果临界值小宇0，那么阻塞！
 
    while (1) { 
    connfd = Accept(listenfd, (SA *) &amp;clientaddr, &amp;clientlen);
    sbuf_insert(&amp;sbuf, connfd); /* 这里面包含了锁，涉及的PV操作 ，相当于P()，临界值＋1*/
    }
}
 
void *thread(void *vargp) 
{  
    Pthread_detach(pthread_self()); 
    while (1) { 
    int connfd = sbuf_remove(&amp;sbuf); /* Remove connfd from buffer */
    echo_cnt(connfd);                
    Close(connfd);
    }
}
&lt;/code&gt;&lt;/pre&gt;

</description>
    </item>
    
    <item>
      <title>Factory_DesignPattern</title>
      <link>place_your_blog_url_here/2014/05/03/factory_designpattern.html</link>
      <pubDate>03 May 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/2014/05/03/factory_designpattern</guid>
      <description>&lt;h1&gt;三种工厂模式的C++实现&lt;/h1&gt;

&lt;p&gt;最近想换换口味，于是抱起久违的design pattern漫画书品读起来。
工厂模式属于创建型模式，大致可以分为三类，简单工厂模式、工厂方法模式、抽象工厂模式。&lt;/p&gt;

&lt;p&gt;首先介绍简单工厂模式，它的主要特点是需要在工厂类中做判断，从而创造相应的产品。当增加新的产品时，就需要修改工厂类。
缺点：对修改不封闭，新增加产品您要修改工厂。违法了鼎鼎大名的开闭法则（OCP）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/SingleFactory.png&quot; alt=&quot;&quot; /&gt;
下面的代码，由于插件有些问题，导致无法在网页显示，我将尽快修复！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#include &lt;iostream&gt;
using namespace std;
 
enum TYPE{COREA,COREB};

class SingleCore
{
    public:
        virtual ~SingleCore(){};
        virtual void Show() = 0;
};
 
class CoreA:public SingleCore
{
    public:
        void Show()
        {
            cout&lt;&lt; &quot;CoreA&quot;&lt;&lt; endl;
        }
};
class CoreB:public SingleCore
{
    public:
        void Show()
        {
            cout &lt;&lt;&quot;CoreB&quot;&lt;&lt; endl;
        }
};
 
class SingleFactory
{
    public:
        SingleCore* CreateSingleCore(enum TYPE type)
        {
            if(type==COREA)
                return new CoreA();
            else if(type==COREB)
                return new CoreB();
            else 
                return NULL;
        }
};
 
 
int main()
{
    SingleFactory factory;
    SingleCore  *pcorea = factory.CreateSingleCore(COREA);
    pcorea-&gt;Show();
    SingleCore  *pcoreb = factory.CreateSingleCore(COREB);
    pcoreb-&gt;Show();
 
    delete pcorea;
    delete pcoreb;
}
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;工厂方法模式的应用并不是只是为了封装对象的创建，而是要把对象的创建放到子类中实现：Factory中只是提供了对象创建的接口，其实现将放在Factory的子类Factory中进行。
工厂方法模式也有缺点，每增加一种产品，就需要增加一个对象的工厂。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/Factory.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

#include &lt;iostream&gt;
using namespace std;
 
 
class SingleCore
{
    public:
        virtual ~SingleCore(){};
        virtual void Show() = 0;
};
 
class CoreA:public SingleCore
{
    public:
        void Show()
        {
            cout&lt;&lt; &quot;CoreA&quot;&lt;&lt; endl;
        }
};
class CoreB:public SingleCore
{
    public:
        void Show()
        {
            cout &lt;&lt;&quot;CoreB&quot;&lt;&lt; endl;
        }
};
 
class SingleFactory
{
    public:
        virtual SingleCore* CreateSingleCore() = 0;
};
class FactoryA:public SingleFactory
{
    public:
        SingleCore* CreateSingleCore()
        {
            return new CoreA;
        }
};
 
class FactoryB:public SingleFactory
{
    public:
        SingleCore* CreateSingleCore()
        {
            return new CoreB;
        }
};
 
 
int main()
{
    FactoryA factorya;
    SingleCore  *pcorea = factorya.CreateSingleCore();
    pcorea-&gt;Show();
 
    FactoryB factoryb;
    SingleCore  *pcoreb = factoryb.CreateSingleCore();
    pcoreb-&gt;Show();
 
    delete pcorea;
    delete pcoreb;
}
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;抽象工厂模式登场了。它的定义为提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。
抽象工厂模式的组成（和工厂方法模式一样）：&lt;/p&gt;

&lt;p&gt;1)抽象工厂角色：这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类。&lt;/p&gt;

&lt;p&gt;2)具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象。&lt;/p&gt;

&lt;p&gt;3)抽象产品角色：它是具体产品继承的父类或者是实现的接口。&lt;/p&gt;

&lt;p&gt;4)具体产品角色：具体工厂角色所创建的对象就是此角色的实例。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/AbstractFactory.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

#include &lt;iostream&gt;
using namespace std;
 
 
class SingleCore
{
    public:
        virtual ~SingleCore();
        virtual void Show() = 0;
};
 
class CoreA:public SingleCore
{
    public:
        void Show()
        {
            cout&lt;&lt; &quot;CoreA&quot;&lt;&lt; endl;
        }
};

class CoreB:public SingleCore
{
    public:
        void Show()
        {
            cout &lt;&lt;&quot;CoreB&quot;&lt;&lt; endl;
        }
};
//-------------------------------------------------------
class MultiCore
{
    public:
        virtual void Show() = 0;
        virtual ~MultiCore(){};
};
 
class MultiCoreA:public MultiCore
{
    public:
        void Show()
        {
            cout&lt;&lt;&quot;MultiCoreA&quot;&lt;&lt; endl;
        }
};
 
class MultiCoreB:public MultiCore
{
    public:
        void Show()
        {   
            cout&lt;&lt;&quot;MultiCoreB&quot;&lt;&lt; endl;
        }   
};
//----------------------------------------------------------
class CoreFactory
{
    public:
        virtual SingleCore* CreateSingleCore() = 0;
        virtual MultiCore* CreateMultiCore() = 0;
};
class FactoryA:public CoreFactory
{
    public:
        SingleCore* CreateSingleCore()
        {
            return new CoreA();
        }
        MultiCore* CreateMultiCore()
        {
            return new MultiCoreA();
        }
};
 
class FactoryB:public CoreFactory
{
    public:
        SingleCore* CreateSingleCore()
        {
            return new CoreB();
        }
        MultiCore* CreateMultiCore()
        {
            return new MultiCoreB();
        }
 
};
 
 
int main()
{
    FactoryA factorya;
    SingleCore  *pcorea = factorya.CreateSingleCore();
    pcorea-&gt;Show();
 
    MultiCore   *pmulticorea = factorya.CreateMultiCore();
    pmulticorea-&gt;Show();
 
    FactoryB factoryb;
    SingleCore  *pcoreb = factoryb.CreateSingleCore();
    pcoreb-&gt;Show();
 
    MultiCore   *pmulticoreb = factoryb.CreateMultiCore();
    pmulticoreb-&gt;Show();
 
    delete pcorea;
    delete pcoreb;
    delete pmulticorea;
    delete pmulticoreb;
}

&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;后续我会学习其他设计模式。并贴出C++代码实现。&lt;/p&gt;

&lt;p&gt;参考：http://blog.csdn.net/silangquan/article/details/20492293&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RAM_Management3个层次的关系</title>
      <link>place_your_blog_url_here/2014/04/14/ram_management3.html</link>
      <pubDate>14 Apr 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/2014/04/14/ram_management3</guid>
      <description>&lt;h1&gt;内存管理3个层次的关系&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/1561.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面以扩展用户堆栈为例，解释3个层次的关系。&lt;/p&gt;

&lt;p&gt;调用函数时，会涉及堆栈的操作，当访问地址超过堆栈的边界时，便引起page fault，内核处理页面失效的过程中，涉及到内存管理的3个层次。&lt;/p&gt;

&lt;p&gt;Ø 调用expand_stack()修改vm_area_struct结构，即扩展堆栈区的虚拟地址空间；&lt;/p&gt;

&lt;p&gt;Ø 创建空白页表项，这一过程会利用mm_struct中的pgd(页全局目录表基址)得到页目录表项(pgd_offset())，然后计算得到相应的页表项(pte_alloc())地址；&lt;/p&gt;

&lt;p&gt;Ø 调用alloc_page()分配物理页面，它会从指定内存管理区的buddy system中查找一块合适的free_area，进而得到一个物理页面；&lt;/p&gt;

&lt;p&gt;Ø 创建映射关系，先调用mk_pte()产生页表项内容，然后调用set_pte()写入页表项。&lt;/p&gt;

&lt;p&gt;Ø 至此，扩展堆栈基本完成，用户进程重新访问堆栈便可以成功。&lt;/p&gt;

&lt;p&gt;可以认为，结构体pgd和vm_area_struct，函数alloc_page()和mk_pte()是连接三者的桥梁。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;让内核能够支持4K页到某一值之间的任意2的幂数值的大小的页面。注意，这里的页面指的是连续的物理页。
这个有点像伙伴系统。如果我们选择支持4K~4M页，那么我们就要能够分配4K~4M之间的任意2的幂数值的大小的连续物理页框：如果没有合适大小的页框，要对更大的页框进行剪裁；如果页框被归还回来，要主动将两个连续的页框块合并为一个较大的页框块。&lt;/p&gt;&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Linux VM虚拟存储器系统（读书笔记）</title>
      <link>place_your_blog_url_here/2014/04/14/linux-vm.html</link>
      <pubDate>14 Apr 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/2014/04/14/linux-vm</guid>
      <description>&lt;h1&gt;Linux虚拟存储器系统（读书笔记）&lt;/h1&gt;

&lt;p&gt;之前学了一段时间JOS的Env，对Linux的进程来说，每个进程有个进程控制块PCB。进程的消亡，就是Linux通过控制PCB进行的。&lt;/p&gt;

&lt;p&gt;内核虚拟存储器包含内核中的代码和数据结构。内核虚拟存储器的某些区域被映射到所有进程共享的物理页面。例如，每个进程共享内核的代码和全局数据结构。下面这个图和JOS很像。高位属于kernel地址，低位留给user application。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/3419.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;内核为系统中的每个进程维护一个单独的任务结构(源代码中的task_struct)。任务结构中的元素包含或者指向内核运行该进程所需要的所有信息(例如，PID，指向用户栈的指针、可执行的目标文件的名字以及程序计数器)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/3845.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;task_struct中的一个条目指向mm_struct，它描述了虚拟存储器中的当前状态。其中pgd指向第一级页表(页全局目录)的基址，而mmap指向一个vm_area_struct(区域结构)的链表，其中每个vm_area_structs都描述了当前虚拟地址空间的一个区域(area)。当内核运行这个进程时，它就将pgd存放在CR3控制寄存器中。&lt;/p&gt;

&lt;h4&gt;在JOS中使用lcr3(physics address)来记录地址。&lt;/h4&gt;

&lt;p&gt;一个具体区域结构包含下面的字段：&lt;/p&gt;

&lt;p&gt;vm_start：指向这个区域的起始处。
vm_end：指向这个区域的结束处。
vm_prot：描述这个区域的内包含的所有页的读写许可权限。
vm_flags：描述这个区域内页面是与其他进程共享的，还是这个进程私有的(还描述了其他一些信息)。
vm_next：指向链表中下一个区域结构。
共享页面&lt;/p&gt;

&lt;p&gt;共享对象的关键点在于即使对象被映射到了多个共享区域，物理存储器也只需要存放共享对象的一个拷贝。&lt;/p&gt;

&lt;h5&gt;一个共享对象(注意，物理页面不一定是连续的。)&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/5618.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5&gt;私有对象是使用一种叫做写时拷贝(copy-on-write)的巧妙技术被映射到虚拟存储器中的。对于每个映射私有对象的进程，相应私有区域的页表条目都被标记为只读，并且区域结构被标记为私有的写时拷贝。&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/5641.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中有些函数比较重要.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mmap函数要求内核创建一个新的虚拟存储器区域是，最好是从地址start开始的一个区域，并将文件描述符fd指定的对象的一个连续的片(chunk)映射到这个新区域。连续的对象片大小为length字节，从距文件开始处偏移量为offset字节的地方开始。start地址仅仅是一个暗示，通常被定义为NULL。&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code&gt;
#include&lt;unistd.h&gt;
#include&lt;sys/mman.h&gt;
void *mmap(void *start,size_t length,int prot,int flags,int fd,off_t offset) ;
                //返回：若成功时则为指向映射区域的指针，若出错则为MAP_FAILED(-1)
&lt;/code&gt;&lt;/pre&gt;


&lt;h6&gt;我们可以使用这个函数将磁盘文件拷贝到stdout。首先我们要明确stdout 在write中fd=1 ，stderr fd =2&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;ctype.h&gt;
#include &lt;setjmp.h&gt;
#include &lt;signal.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;sys/mman.h&gt;
#include &lt;errno.h&gt;
#include &lt;math.h&gt;
#include &lt;pthread.h&gt;
#include &lt;semaphore.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netdb.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
 
 
void unix_error(char *msg)                                                                                          
{                                                                                                              
    fprintf(stderr, &quot;%s: %s\n&quot;, msg, strerror(errno));                                                         
    exit(0);                                                                                                   
}   
int Open(const char *pathname, int flags, mode_t mode)                                                         
{                                                                                                              
    int rc;                                                                                                    
                                                                                                                
    if ((rc = open(pathname, flags, mode))  &lt; 0)                                                               
    unix_error(&quot;Open error&quot;);                                                                                  
    return rc;                                                                                                 
}
ssize_t Write(int fd, const void *buf, size_t count)                                                           
{                                                                                                              
    ssize_t rc;                                                                                                
                                                                                                                
    if ((rc = write(fd, buf, count)) &lt; 0)                                                                      
    unix_error(&quot;Write error&quot;);                                                                                 
    return rc;                                                                                                 
} 
void *Mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset)                                                                 
{                                                                                                              
    void *ptr;                                                                                                 
                                                                                                                
    if ((ptr = mmap(addr, len, prot, flags, fd, offset)) == ((void *) -1))                                     
    unix_error(&quot;mmap error&quot;);                                                                                  
    return(ptr);                                                                                               
}  
 
void mmapcopy(int fd, int size) 
{
    char *bufp; /* ptr to memory mapped VM area */
 
    bufp = Mmap(NULL, size, PROT_READ, MAP_PRIVATE, fd, 0);
    Write(1, bufp, size);
    return;
}
 
 
int main(int argc, char **argv) 
{
    struct stat stat;
    int fd;
 
    if (argc != 2) {
    printf(&quot;usage: %s &lt;filename&gt;\n&quot;, argv[0]);
    exit(0);
    }
 
    fd = Open(argv[1], O_RDONLY, 0);
    fstat(fd, &amp;stat);
    mmapcopy(fd, stat.st_size);
    exit(0);
}
&lt;/code&gt;&lt;/pre&gt;



</description>
    </item>
    
    <item>
      <title>在JOS上实现基于Priority的RR_sched</title>
      <link>place_your_blog_url_here/2014/04/09/jospriorityrr_sched.html</link>
      <pubDate>09 Apr 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/2014/04/09/jospriorityrr_sched</guid>
      <description>&lt;h1&gt;在JOS上实现基于Priority的RR_sched&lt;/h1&gt;

&lt;p&gt;JOS在一开始实现的是简单的RR算法，没有优先级调度。&lt;/p&gt;

&lt;p&gt;下面我实现了具有Priority的RR调度算法。首先我们需要增加一个sys_env_set_priority（）的系统调用。&lt;/p&gt;

&lt;p&gt;首先在inc/env.h 的struct Env中增加env_priority字段。这个字段来表示进程的优先级。&lt;/p&gt;

&lt;p&gt;然后再inc/env.h中增加&lt;strong&gt;PRIORITY_HIGH PRIORITY_DEFAULT&lt;/strong&gt; …..等宏变量。&lt;/p&gt;

&lt;p&gt;在kern/env.h 的 env_alloc（）增加对env.env_priority的设定，默认为PRIORITY_DEAULT。&lt;/p&gt;

&lt;p&gt;然后在真正的kern/syscall.c中实现该函数sys_env_set_priority（）。&lt;/p&gt;

&lt;p&gt;下面我们对添加JOS系统中断&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在inc/syscall.h中添加新的中断号：SYS_env_set_priority。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在kern/syscall.c的syscall()函数中添加相应switch分发语句。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在lib/syscall.c中添加供用户调用系统调用的库函数。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code&gt;
int sys_env_set_priority(envid_t envid, int priority)
{
return syscall(SYS_env_set_priority, 1, envid, priority, 0, 0, 0);
}
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;万事俱备，只欠东风。&lt;/p&gt;

&lt;p&gt;下面在kern/sched.c中编写真正的调度程序 void sched_yield(void)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
void RR_Priority_sched(void)
{
       int now_env,i;
       if(curenv)
       {
           now_env = (ENVX(curenv-&gt;env_id) +1) % NENV;
       }
       else
       {
           now_env = 0 ;
       }

       uint32_t max_priority = 0;
       int select_env = -1;

   //  cprintf(&quot;NENV=%d\n&quot;,NENV);
       for(i= 0;i&lt; NENV;i++ , now_env = (now_env+1)%NENV)      
       {          
            if(envs[now_env].env_status ==ENV_RUNNABLE &amp;&amp; (envs[now_env].env_priority &gt; max_priority
                       ||select_env == -1))
           {
               select_env=now_env;
               max_priority = envs[now_env].env_priority;
               cprintf (&quot;I am CPU %d , I am in sched yield , I find ENV %d,Priority 0x%x, i = %d\n&quot;,
                       thiscpu -&gt;cpu_id , select_env,max_priority,i);
           }
       }

       //cprintf (&quot;I am CPU %d , I am in sched yield , I find ENV %d,Priority %d\n&quot;,thiscpu -&gt;cpu_id , select_env,max_priority);

       if (select_env &gt;= 0 &amp;&amp; (! curenv || curenv -&gt;env_status != ENV_RUNNING ||
                   max_priority &gt;= curenv -&gt;env_priority))
       {
           env_run (&amp; envs[select_env ]);
       }
       if (curenv &amp;&amp; curenv -&gt;env_status == ENV_RUNNING)
       {
           env_run(curenv);
       }

   }
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;系统调用在linux中差不多也是这个流程。&lt;a href=&quot;&quot;&gt;http://blog.csdn.net/m6830098/article/details/9056457&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一般的，进程是不能访问内核的。它不能访问内核所占内存空间也不能调用内核函数。CPU硬件决定了这些（这就是为什么它被称作”保护模式”）。系统调用是这些规则的一个例外。其原理是进程先用适当的值填充寄存器，然后调用一个特殊的指令，这个指令会跳到一个事先定义的内核中的一个位置（当然，这个位置是用户进程可读但是不可写的）。在Intel CPU中，这个由中断0×80实现。硬件知道一旦你跳到这个位置，你就不是在限制模式下运行的用户，而是作为操作系统的内核–所以你就可以为所欲为。
进程可以跳转到的内核位置叫做sysem_call。这个过程检查系统调用号，这个号码告诉内核进程请求哪种服务。然后，它查看系统调用表(sys_call_table)找到所调用的内核函数入口地址。接着，就调用函数，等返回后，做一些系统检查，最后返回到进程（或到其他进程，如果这个进程时间用尽）。如果你希望读这段代码，它在&amp;lt;内核源码目录&gt;/kernel/entry.S，Entry(system_call)的下一行。&lt;/p&gt;

&lt;p&gt;传统意义上系统调用产生中断，陷入内核。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pic/IMG_0343.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Systemcall流程</title>
      <link>place_your_blog_url_here/2014/04/08/systemcall.html</link>
      <pubDate>08 Apr 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/2014/04/08/systemcall</guid>
      <description>
</description>
    </item>
    
    <item>
      <title>Markdown grammer</title>
      <link>place_your_blog_url_here/2014/03/30/markdown-grammer.html</link>
      <pubDate>30 Mar 2014</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/2014/03/30/markdown-grammer</guid>
      <description>&lt;h1&gt;Markdown 语法说明 (简体中文版)&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#overview&quot;&gt;概述&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#philosophy&quot;&gt;宗旨&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#html&quot;&gt;兼容 HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#autoescape&quot;&gt;特殊字符自动转换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#block&quot;&gt;区块元素&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#p&quot;&gt;段落和换行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#header&quot;&gt;标题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#blockquote&quot;&gt;区块引用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#list&quot;&gt;列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#precode&quot;&gt;代码区块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hr&quot;&gt;分隔线&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#span&quot;&gt;区段元素&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#link&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#em&quot;&gt;强调&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#code&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#img&quot;&gt;图片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#misc&quot;&gt;其它&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#backslash&quot;&gt;反斜杠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#autolink&quot;&gt;自动链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#acknowledgement&quot;&gt;感谢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;#editor&quot;&gt;Markdown 免费编辑器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;hr /&gt;

&lt;h2 id=&quot;overview&quot;&gt;概述&lt;/h2&gt;




&lt;h3 id=&quot;philosophy&quot;&gt;宗旨&lt;/h3&gt;


&lt;p&gt;Markdown 的目标是实现「易读易写」。&lt;/p&gt;

&lt;p&gt;可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 &lt;a href=&quot;http://docutils.sourceforge.net/mirror/setext.html&quot;&gt;Setext&lt;/a&gt;、&lt;a href=&quot;http://www.aaronsw.com/2002/atx/&quot;&gt;atx&lt;/a&gt;、&lt;a href=&quot;http://textism.com/tools/textile/&quot;&gt;Textile&lt;/a&gt;、&lt;a href=&quot;http://docutils.sourceforge.net/rst.html&quot;&gt;reStructuredText&lt;/a&gt;、&lt;a href=&quot;http://www.triptico.com/software/grutatxt.html&quot;&gt;Grutatext&lt;/a&gt; 和 &lt;a href=&quot;http://ettext.taint.org/doc/&quot;&gt;EtText&lt;/a&gt;，而最大灵感来源其实是纯文本电子邮件的格式。&lt;/p&gt;

&lt;p&gt;总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。&lt;/p&gt;

&lt;h3 id=&quot;html&quot;&gt;兼容 HTML&lt;/h3&gt;


&lt;p&gt;Markdown 语法的目标是：成为一种适用于网络的&lt;em&gt;书写&lt;/em&gt;语言。&lt;/p&gt;

&lt;p&gt;Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想&lt;em&gt;不是&lt;/em&gt;要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种&lt;em&gt;发布&lt;/em&gt;的格式，Markdown 是一种&lt;em&gt;书写&lt;/em&gt;的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。&lt;/p&gt;

&lt;p&gt;不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。&lt;/p&gt;

&lt;p&gt;要制约的只有一些 HTML 区块元素――比如 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 标签。&lt;/p&gt;

&lt;p&gt;例子如下，在 Markdown 文件里加上一段 HTML 表格：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个普通段落。

&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Foo&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;

这是另一个普通段落。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的&lt;code&gt;*强调*&lt;/code&gt;会没有效果。&lt;/p&gt;

&lt;p&gt;HTML 的区段（行内）标签如 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。&lt;/p&gt;

&lt;p&gt;和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。&lt;/p&gt;

&lt;h3 id=&quot;autoescape&quot;&gt;特殊字符自动转换&lt;/h3&gt;


&lt;p&gt;在 HTML 文件中，有两个字符需要特殊处理： &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&lt;/code&gt; 。 &lt;code&gt;&amp;lt;&lt;/code&gt; 符号用于起始标签，&lt;code&gt;&amp;amp;&lt;/code&gt; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt;code&gt;&amp;amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;amp;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; 字符尤其让网络文档编写者受折磨，如果你要打「&lt;code&gt;AT&amp;amp;T&lt;/code&gt;」 ，你必须要写成「&lt;code&gt;AT&amp;amp;amp;T&lt;/code&gt;」。而网址中的 &lt;code&gt;&amp;amp;&lt;/code&gt; 字符也要转换。比如你要链接到：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://images.google.com/images?num=30&amp;amp;q=larry+bird
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你必须要把网址转换写为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://images.google.com/images?num=30&amp;amp;amp;q=larry+bird
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;才能放到链接标签的 &lt;code&gt;href&lt;/code&gt; 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。&lt;/p&gt;

&lt;p&gt;Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &lt;code&gt;&amp;amp;&lt;/code&gt; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &lt;code&gt;&amp;amp;amp&lt;/code&gt;;。&lt;/p&gt;

&lt;p&gt;所以你如果要在文档中插入一个版权符号 &lt;code&gt;©&lt;/code&gt;，你可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;copy;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 会保留它不动。而若你写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AT&amp;amp;T
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 就会将它转为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AT&amp;amp;amp;T
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类似的状况也会发生在 &lt;code&gt;&amp;lt;&lt;/code&gt; 符号上，因为 Markdown 允许 &lt;a href=&quot;#html&quot;&gt;兼容 HTML&lt;/a&gt; ，如果你是把 &lt;code&gt;&amp;lt;&lt;/code&gt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;4 &amp;lt; 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 将会把它转换为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;4 &amp;amp;lt; 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过需要注意的是，code 范围内，不论是行内还是区块， &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&lt;/code&gt; 两个符号都&lt;em&gt;一定&lt;/em&gt;会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&lt;/code&gt; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;block&quot;&gt;区块元素&lt;/h2&gt;




&lt;h3 id=&quot;p&quot;&gt;段落和换行&lt;/h3&gt;


&lt;p&gt;一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。&lt;/p&gt;

&lt;p&gt;「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; 标签。&lt;/p&gt;

&lt;p&gt;如果你&lt;em&gt;确实&lt;/em&gt;想要依赖 Markdown 来插入 &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; 标签的话，在插入处先按入两个以上的空格然后回车。&lt;/p&gt;

&lt;p&gt;的确，需要多费点事（多加空格）来产生 &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; ，但是简单地「每个换行都转换为 &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;」的方法在 Markdown 中并不适合， Markdown 中 email 式的 &lt;a href=&quot;#blockquote&quot;&gt;区块引用&lt;/a&gt; 和多段落的 &lt;a href=&quot;#list&quot;&gt;列表&lt;/a&gt; 在使用换行来排版的时候，不但更好用，还更方便阅读。&lt;/p&gt;

&lt;h3 id=&quot;header&quot;&gt;标题&lt;/h3&gt;


&lt;p&gt;Markdown 支持两种标题的语法，类 &lt;a href=&quot;http://docutils.sourceforge.net/mirror/setext.html&quot;&gt;Setext&lt;/a&gt; 和类 &lt;a href=&quot;http://www.aaronsw.com/2002/atx/&quot;&gt;atx&lt;/a&gt; 形式。&lt;/p&gt;

&lt;p&gt;类 Setext 形式是用底线的形式，利用 &lt;code&gt;=&lt;/code&gt; （最高阶标题）和 &lt;code&gt;-&lt;/code&gt; （第二阶标题），例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is an H1
=============

This is an H2
-------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;任何数量的 &lt;code&gt;=&lt;/code&gt; 和 &lt;code&gt;-&lt;/code&gt; 都可以有效果。&lt;/p&gt;

&lt;p&gt;类 Atx 形式则是在行首插入 1 到 6 个 &lt;code&gt;#&lt;/code&gt; ，对应到标题 1 到 6 阶，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 这是 H1

## 这是 H2

###### 这是 H6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 &lt;code&gt;#&lt;/code&gt;，而行尾的 &lt;code&gt;#&lt;/code&gt; 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 这是 H1 #

## 这是 H2 ##

### 这是 H3 ######
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;blockquote&quot;&gt;区块引用 Blockquotes&lt;/h3&gt;


&lt;p&gt;Markdown 标记区块引用是使用类似 email 中用 &lt;code&gt;&amp;gt;&lt;/code&gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &lt;code&gt;&amp;gt;&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&amp;gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&amp;gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&amp;gt; 
&amp;gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&amp;gt; id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &lt;code&gt;&amp;gt;&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&amp;gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &lt;code&gt;&amp;gt;&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; This is the first level of quoting.
&amp;gt;
&amp;gt; &amp;gt; This is nested blockquote.
&amp;gt;
&amp;gt; Back to the first level.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; ## 这是一个标题。
&amp;gt; 
&amp;gt; 1.   这是第一行列表项。
&amp;gt; 2.   这是第二行列表项。
&amp;gt; 
&amp;gt; 给出一些例子代码：
&amp;gt; 
&amp;gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择&lt;em&gt;增加引用阶层&lt;/em&gt;。&lt;/p&gt;

&lt;h3 id=&quot;list&quot;&gt;列表&lt;/h3&gt;


&lt;p&gt;Markdown 支持有序列表和无序列表。&lt;/p&gt;

&lt;p&gt;无序列表使用星号、加号或是减号作为列表标记：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Red
*   Green
*   Blue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等同于：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+   Red
+   Green
+   Blue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也等同于：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-   Red
-   Green
-   Blue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有序列表则使用数字接着一个英文句点：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.  Bird
2.  McHale
3.  Parish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Bird&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;McHale&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Parish&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你的列表标记写成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.  Bird
1.  McHale
1.  Parish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或甚至是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3. Bird
1. McHale
8. Parish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。&lt;/p&gt;

&lt;p&gt;如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。&lt;/p&gt;

&lt;p&gt;列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。&lt;/p&gt;

&lt;p&gt;要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是如果你懒，那也行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;
标签包起来，举例来说：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Bird
*   Magic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Bird&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Magic&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这个：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   Bird

*   Magic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Bird&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Magic&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要在列表项目内放进引用，那 &lt;code&gt;&amp;gt;&lt;/code&gt; 就需要缩进：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   A list item with a blockquote:

    &amp;gt; This is a blockquote
    &amp;gt; inside a list item.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要放代码区块的话，该区块就需要缩进&lt;em&gt;两次&lt;/em&gt;，也就是 8 个空格或是 2 个制表符：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*   一列表项包含一个列表区块：

        &amp;lt;代码写在这&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然，项目列表很可能会不小心产生，像是下面这样的写法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1986. What a great season.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;换句话说，也就是在行首出现&lt;em&gt;数字-句点-空白&lt;/em&gt;，要避免这样的状况，你可以在句点前面加上反斜杠。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1986\. What a great season.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;precode&quot;&gt;代码区块&lt;/h3&gt;


&lt;p&gt;和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; 标签来把代码区块包起来。&lt;/p&gt;

&lt;p&gt;要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个普通段落：

    这是一个代码区块。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 会转换成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;这是一个普通段落：&amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;这是一个代码区块。
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Here is an example of AppleScript:

    tell application &quot;Foo&quot;
        beep
    end tell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Here is an example of AppleScript:&amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;tell application &quot;Foo&quot;
    beep
end tell
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。&lt;/p&gt;

&lt;p&gt;在代码区块里面， &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;gt;&lt;/code&gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;div class=&quot;footer&quot;&amp;gt;
        &amp;amp;copy; 2004 Foo Corporation
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;lt;div class=&quot;footer&quot;&amp;amp;gt;
    &amp;amp;amp;copy; 2004 Foo Corporation
&amp;amp;lt;/div&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。&lt;/p&gt;

&lt;h3 id=&quot;hr&quot;&gt;分隔线&lt;/h3&gt;


&lt;p&gt;你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* * *

***

*****

- - -

---------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;span&quot;&gt;区段元素&lt;/h2&gt;




&lt;h3 id=&quot;link&quot;&gt;链接&lt;/h3&gt;


&lt;p&gt;Markdown 支持两种形式的链接语法： &lt;em&gt;行内式&lt;/em&gt;和&lt;em&gt;参考式&lt;/em&gt;两种形式。&lt;/p&gt;

&lt;p&gt;不管是哪一种，链接文字都是用 [方括号] 来标记。&lt;/p&gt;

&lt;p&gt;要建立一个&lt;em&gt;行内式&lt;/em&gt;的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is [an example](http://example.com/ &quot;Title&quot;) inline link.

[This link](http://example.net/) has no title attribute.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会产生：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;This is &amp;lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&amp;gt;
an example&amp;lt;/a&amp;gt; inline link.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;a href=&quot;http://example.net/&quot;&amp;gt;This link&amp;lt;/a&amp;gt; has no
title attribute.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你是要链接到同样主机的资源，你可以使用相对路径：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;See my [About](/about/) page for details.   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;参考式&lt;/em&gt;的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is [an example][id] reference-style link.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以选择性地在两个方括号中间加上一个空格：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is [an example] [id] reference-style link.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着，在文件的任意处，你可以把这个标记的链接内容定义出来：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id]: http://example.com/  &quot;Optional Title Here&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;链接内容定义的形式为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字&lt;/li&gt;
&lt;li&gt;接着一个冒号&lt;/li&gt;
&lt;li&gt;接着一个以上的空格或制表符&lt;/li&gt;
&lt;li&gt;接着链接的网址&lt;/li&gt;
&lt;li&gt;选择性地接着 title 内容，可以用单引号、双引号或是括弧包着&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;下面这三种链接的定义都是相同：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[foo]: http://example.com/  &quot;Optional Title Here&quot;
[foo]: http://example.com/  'Optional Title Here'
[foo]: http://example.com/  (Optional Title Here)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;请注意：&lt;/strong&gt;有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。&lt;/p&gt;

&lt;p&gt;链接网址也可以用方括号包起来：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id]: &amp;lt;http://example.com/&amp;gt;  &quot;Optional Title Here&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id]: http://example.com/longish/path/to/resource/here
    &quot;Optional Title Here&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。&lt;/p&gt;

&lt;p&gt;链接辨别标签可以有字母、数字、空白和标点符号，但是并&lt;em&gt;不&lt;/em&gt;区分大小写，因此下面两个链接是一样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[link text][a]
[link text][A]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;隐式链接标记&lt;/em&gt;功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 &quot;Google&quot; 链接到 google.com，你可以简化成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Google][]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后定义链接内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Google]: http://google.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Visit [Daring Fireball][] for more information.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后接着定义链接：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Daring Fireball]: http://daringfireball.net/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。&lt;/p&gt;

&lt;p&gt;下面是一个参考式链接的范例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        &quot;Google&quot;
  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [3]: http://search.msn.com/    &quot;MSN Search&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果改成用链接名称的方式写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        &quot;Google&quot;
  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面两种写法都会产生下面的 HTML。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;I get 10 times more traffic from &amp;lt;a href=&quot;http://google.com/&quot;
title=&quot;Google&quot;&amp;gt;Google&amp;lt;/a&amp;gt; than from
&amp;lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&amp;gt;Yahoo&amp;lt;/a&amp;gt;
or &amp;lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&amp;gt;MSN&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)
than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or
[MSN](http://search.msn.com/ &quot;MSN Search&quot;).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。&lt;/p&gt;

&lt;p&gt;使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。&lt;/p&gt;

&lt;h3 id=&quot;em&quot;&gt;强调&lt;/h3&gt;


&lt;p&gt;Markdown 使用星号（&lt;code&gt;*&lt;/code&gt;）和底线（&lt;code&gt;_&lt;/code&gt;）作为标记强调字词的符号，被 &lt;code&gt;*&lt;/code&gt; 或 &lt;code&gt;_&lt;/code&gt; 包围的字词会被转成用 &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; 标签包围，用两个 &lt;code&gt;*&lt;/code&gt; 或 &lt;code&gt;_&lt;/code&gt; 包起来的话，则会被转成 &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会转成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;em&amp;gt;single asterisks&amp;lt;/em&amp;gt;

&amp;lt;em&amp;gt;single underscores&amp;lt;/em&amp;gt;

&amp;lt;strong&amp;gt;double asterisks&amp;lt;/strong&amp;gt;

&amp;lt;strong&amp;gt;double underscores&amp;lt;/strong&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。&lt;/p&gt;

&lt;p&gt;强调也可以直接插在文字中间：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;un*frigging*believable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是&lt;strong&gt;如果你的 &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;_&lt;/code&gt; 两边都有空白的话，它们就只会被当成普通的符号&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\*this text is surrounded by literal asterisks\*
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;code&quot;&gt;代码&lt;/h3&gt;


&lt;p&gt;如果要标记一小段行内代码，你可以用反引号把它包起来（&lt;code&gt;`&lt;/code&gt;），例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Use the `printf()` function.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会产生：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Use the &amp;lt;code&amp;gt;printf()&amp;lt;/code&amp;gt; function.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;``There is a literal backtick (`) here.``
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段语法会产生：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;There is a literal backtick (`) here.&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会产生：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;A single backtick in a code span: &amp;lt;code&amp;gt;`&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;A backtick-delimited string in a code span: &amp;lt;code&amp;gt;`foo`&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在代码区段内，&lt;code&gt;&amp;amp;&lt;/code&gt; 和方括号&lt;strong&gt;都&lt;/strong&gt;会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Please don't use any `&amp;lt;blink&amp;gt;` tags.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Please don't use any &amp;lt;code&amp;gt;&amp;amp;lt;blink&amp;amp;gt;&amp;lt;/code&amp;gt; tags.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`&amp;amp;#8212;` is the decimal-encoded equivalent of `&amp;amp;mdash;`.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以产生：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&amp;amp;amp;#8212;&amp;lt;/code&amp;gt; is the decimal-encoded
equivalent of &amp;lt;code&amp;gt;&amp;amp;amp;mdash;&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;img&quot;&gt;图片&lt;/h3&gt;


&lt;p&gt;很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。&lt;/p&gt;

&lt;p&gt;Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： &lt;em&gt;行内式&lt;/em&gt;和&lt;em&gt;参考式&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;行内式的图片语法看起来像是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg &quot;Optional title&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详细叙述如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一个惊叹号 &lt;code&gt;!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;接着一个方括号，里面放上图片的替代文字&lt;/li&gt;
&lt;li&gt;接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上
选择性的 'title' 文字。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;参考式的图片语法则长得像这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![Alt text][id]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[id]: url/to/image  &quot;Optional title attribute&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 标签。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;misc&quot;&gt;其它&lt;/h2&gt;




&lt;h3 id=&quot;autolink&quot;&gt;自动链接&lt;/h3&gt;


&lt;p&gt;Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;http://example.com/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 会转为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&quot;http://example.com/&quot;&amp;gt;http://example.com/&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;address@example.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 会转成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&quot;&amp;amp;#x6D;&amp;amp;#x61;i&amp;amp;#x6C;&amp;amp;#x74;&amp;amp;#x6F;:&amp;amp;#x61;&amp;amp;#x64;&amp;amp;#x64;&amp;amp;#x72;&amp;amp;#x65;
&amp;amp;#115;&amp;amp;#115;&amp;amp;#64;&amp;amp;#101;&amp;amp;#120;&amp;amp;#x61;&amp;amp;#109;&amp;amp;#x70;&amp;amp;#x6C;e&amp;amp;#x2E;&amp;amp;#99;&amp;amp;#111;
&amp;amp;#109;&quot;&amp;gt;&amp;amp;#x61;&amp;amp;#x64;&amp;amp;#x64;&amp;amp;#x72;&amp;amp;#x65;&amp;amp;#115;&amp;amp;#115;&amp;amp;#64;&amp;amp;#101;&amp;amp;#120;&amp;amp;#x61;
&amp;amp;#109;&amp;amp;#x70;&amp;amp;#x6C;e&amp;amp;#x2E;&amp;amp;#99;&amp;amp;#111;&amp;amp;#109;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在浏览器里面，这段字串（其实是 &lt;code&gt;&amp;lt;a href=&quot;mailto:address@example.com&quot;&amp;gt;address@example.com&amp;lt;/a&amp;gt;&lt;/code&gt;）会变成一个可以点击的「address@example.com」链接。&lt;/p&gt;

&lt;p&gt;（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）&lt;/p&gt;

&lt;h3 id=&quot;backslash&quot;&gt;反斜杠&lt;/h3&gt;


&lt;p&gt;Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; 标签），你可以在星号的前面加上反斜杠：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\*literal asterisks\*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\   反斜线
`   反引号
*   星号
_   底线
{}  花括号
[]  方括号
()  括弧
#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;acknowledgement&quot;&gt;感谢&lt;/h2&gt;


&lt;p&gt;感谢 &lt;a href=&quot;https://twitter.com/#!/leafy7382&quot;&gt;leafy7382&lt;/a&gt; 协助翻译，&lt;a href=&quot;http://iamhlb.com/&quot;&gt;hlb&lt;/a&gt;、&lt;a href=&quot;http://twitter.com/randylien&quot;&gt;Randylien&lt;/a&gt; 帮忙润稿，&lt;a href=&quot;https://twitter.com/#!/ethantw&quot;&gt;ethantw&lt;/a&gt; 的&lt;a href=&quot;http://ethantw.net/projects/han/&quot;&gt;汉字标准格式・CSS Reset&lt;/a&gt;， &lt;a href=&quot;http://kidwm.net/&quot;&gt;WM&lt;/a&gt; 回报文字错误。&lt;/p&gt;

&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/fenprace&quot;&gt;fenprace&lt;/a&gt;，&lt;a href=&quot;https://github.com/addv&quot;&gt;addv&lt;/a&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;editor&quot;&gt;Markdown 免费编辑器&lt;/h2&gt;


&lt;p&gt;Windows 平台&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://markdownpad.com/&quot;&gt;MarkdownPad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code52.org/DownmarkerWPF/&quot;&gt;MarkPad&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Linux 平台&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sourceforge.net/p/retext/home/ReText/&quot;&gt;ReText&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Mac 平台&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mouapp.com/&quot;&gt;Mou&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;在线编辑器&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://markable.in/&quot;&gt;Markable.in&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dillinger.io/&quot;&gt;Dillinger.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;浏览器插件&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog&quot;&gt;MaDe&lt;/a&gt; (Chrome)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;高级应用&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;Sublime Text 2&lt;/a&gt; + &lt;a href=&quot;http://ttscoff.github.com/MarkdownEditing/&quot;&gt;MarkdownEditing&lt;/a&gt; / &lt;a href=&quot;http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/&quot;&gt;教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
  </channel>
</rss>